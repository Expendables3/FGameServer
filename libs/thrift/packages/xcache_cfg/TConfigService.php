<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/xcache_cfg/xcache_cfg_types.php';

interface TConfigServiceIf {
  public function getServicesStat();
  public function getHandlerInfo($name);
  public function getWorkerInfo($name);
  public function setOperationsSet($optsSet);
  public function enableHandler($name, $hndType, $enable);
  public function setMaxSizeLRU($maxSizeLRU);
  public function flush();
}

class TConfigServiceClient implements TConfigServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getServicesStat()
  {
    $this->send_getServicesStat();
    return $this->recv_getServicesStat();
  }

  public function send_getServicesStat()
  {
    $args = new wtxcache_TConfigService_getServicesStat_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServicesStat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServicesStat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServicesStat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_getServicesStat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_getServicesStat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("getServicesStat failed: unknown result");
  }

  public function getHandlerInfo($name)
  {
    $this->send_getHandlerInfo($name);
    return $this->recv_getHandlerInfo();
  }

  public function send_getHandlerInfo($name)
  {
    $args = new wtxcache_TConfigService_getHandlerInfo_args();
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getHandlerInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getHandlerInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getHandlerInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_getHandlerInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_getHandlerInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("getHandlerInfo failed: unknown result");
  }

  public function getWorkerInfo($name)
  {
    $this->send_getWorkerInfo($name);
    return $this->recv_getWorkerInfo();
  }

  public function send_getWorkerInfo($name)
  {
    $args = new wtxcache_TConfigService_getWorkerInfo_args();
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getWorkerInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getWorkerInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getWorkerInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_getWorkerInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_getWorkerInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("getWorkerInfo failed: unknown result");
  }

  public function setOperationsSet($optsSet)
  {
    $this->send_setOperationsSet($optsSet);
    return $this->recv_setOperationsSet();
  }

  public function send_setOperationsSet($optsSet)
  {
    $args = new wtxcache_TConfigService_setOperationsSet_args();
    $args->optsSet = $optsSet;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setOperationsSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setOperationsSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setOperationsSet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_setOperationsSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_setOperationsSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("setOperationsSet failed: unknown result");
  }

  public function enableHandler($name, $hndType, $enable)
  {
    $this->send_enableHandler($name, $hndType, $enable);
    return $this->recv_enableHandler();
  }

  public function send_enableHandler($name, $hndType, $enable)
  {
    $args = new wtxcache_TConfigService_enableHandler_args();
    $args->name = $name;
    $args->hndType = $hndType;
    $args->enable = $enable;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enableHandler', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enableHandler', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enableHandler()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_enableHandler_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_enableHandler_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("enableHandler failed: unknown result");
  }

  public function setMaxSizeLRU($maxSizeLRU)
  {
    $this->send_setMaxSizeLRU($maxSizeLRU);
    return $this->recv_setMaxSizeLRU();
  }

  public function send_setMaxSizeLRU($maxSizeLRU)
  {
    $args = new wtxcache_TConfigService_setMaxSizeLRU_args();
    $args->maxSizeLRU = $maxSizeLRU;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setMaxSizeLRU', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setMaxSizeLRU', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setMaxSizeLRU()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_setMaxSizeLRU_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_setMaxSizeLRU_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("setMaxSizeLRU failed: unknown result");
  }

  public function flush()
  {
    $this->send_flush();
    return $this->recv_flush();
  }

  public function send_flush()
  {
    $args = new wtxcache_TConfigService_flush_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'flush', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('flush', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_flush()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'wtxcache_TConfigService_flush_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new wtxcache_TConfigService_flush_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("flush failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class wtxcache_TConfigService_getServicesStat_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'TConfigService_getServicesStat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getServicesStat_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_getServicesStat_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TServicesStat',
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_getServicesStat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new wtcommon_TServicesStat();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getServicesStat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_getHandlerInfo_args {
  static $_TSPEC;

  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_getHandlerInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getHandlerInfo_args');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_getHandlerInfo_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_THandlerInfo',
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_getHandlerInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new wtcommon_THandlerInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getHandlerInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_getWorkerInfo_args {
  static $_TSPEC;

  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_getWorkerInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getWorkerInfo_args');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_getWorkerInfo_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_THandlerWorkerInfo',
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_getWorkerInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new wtcommon_THandlerWorkerInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_getWorkerInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_setOperationsSet_args {
  static $_TSPEC;

  public $optsSet = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'optsSet',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['optsSet'])) {
        $this->optsSet = $vals['optsSet'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_setOperationsSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->optsSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_setOperationsSet_args');
    if ($this->optsSet !== null) {
      $xfer += $output->writeFieldBegin('optsSet', TType::I32, 1);
      $xfer += $output->writeI32($this->optsSet);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_setOperationsSet_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_setOperationsSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_setOperationsSet_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_enableHandler_args {
  static $_TSPEC;

  public $name = null;
  public $hndType = null;
  public $enable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'hndType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'enable',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['hndType'])) {
        $this->hndType = $vals['hndType'];
      }
      if (isset($vals['enable'])) {
        $this->enable = $vals['enable'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_enableHandler_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hndType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_enableHandler_args');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hndType !== null) {
      $xfer += $output->writeFieldBegin('hndType', TType::I32, 2);
      $xfer += $output->writeI32($this->hndType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable !== null) {
      $xfer += $output->writeFieldBegin('enable', TType::BOOL, 3);
      $xfer += $output->writeBool($this->enable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_enableHandler_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_enableHandler_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_enableHandler_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_setMaxSizeLRU_args {
  static $_TSPEC;

  public $maxSizeLRU = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maxSizeLRU',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['maxSizeLRU'])) {
        $this->maxSizeLRU = $vals['maxSizeLRU'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_setMaxSizeLRU_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxSizeLRU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_setMaxSizeLRU_args');
    if ($this->maxSizeLRU !== null) {
      $xfer += $output->writeFieldBegin('maxSizeLRU', TType::I32, 1);
      $xfer += $output->writeI32($this->maxSizeLRU);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_setMaxSizeLRU_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_setMaxSizeLRU_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_setMaxSizeLRU_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_flush_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'TConfigService_flush_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_flush_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtxcache_TConfigService_flush_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidOperation',
          ),
        2 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TInvalidArgument',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'TConfigService_flush_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new wtcommon_TInvalidOperation();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new wtcommon_TInvalidArgument();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TConfigService_flush_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, 1);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, 2);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
