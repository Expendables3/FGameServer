<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['wtcommon_E_TThreadOption'] = array(
  'THR_OPT_UNKNOWN' => 0,
  'THR_OPT_SYN' => 1,
  'THR_OPT_ASYN' => 2,
  'THR_OPT_SHARED_ASYN' => 3,
);

final class wtcommon_TThreadOption {
  const THR_OPT_UNKNOWN = 0;
  const THR_OPT_SYN = 1;
  const THR_OPT_ASYN = 2;
  const THR_OPT_SHARED_ASYN = 3;
  static public $__names = array(
    0 => 'THR_OPT_UNKNOWN',
    1 => 'THR_OPT_SYN',
    2 => 'THR_OPT_ASYN',
    3 => 'THR_OPT_SHARED_ASYN',
  );
}

$GLOBALS['wtcommon_E_THandlerType'] = array(
  'HND_UNKNOWN' => 0,
  'HND_BOTH_RW' => 1,
  'HND_READ' => 2,
  'HND_WRITE' => 3,
);

final class wtcommon_THandlerType {
  const HND_UNKNOWN = 0;
  const HND_BOTH_RW = 1;
  const HND_READ = 2;
  const HND_WRITE = 3;
  static public $__names = array(
    0 => 'HND_UNKNOWN',
    1 => 'HND_BOTH_RW',
    2 => 'HND_READ',
    3 => 'HND_WRITE',
  );
}

$GLOBALS['wtcommon_E_TOperationsSet'] = array(
  'OPT_NONE' => 0,
  'OPT_ALL' => 1,
  'OPT_READ' => 2,
  'OPT_WRITE' => 3,
  'OPT_W_ADD' => 4,
  'OPT_W_REMOVE' => 5,
  'OPT_READ_W_ADD' => 6,
  'OPT_READ_W_REMOVE' => 7,
);

final class wtcommon_TOperationsSet {
  const OPT_NONE = 0;
  const OPT_ALL = 1;
  const OPT_READ = 2;
  const OPT_WRITE = 3;
  const OPT_W_ADD = 4;
  const OPT_W_REMOVE = 5;
  const OPT_READ_W_ADD = 6;
  const OPT_READ_W_REMOVE = 7;
  static public $__names = array(
    0 => 'OPT_NONE',
    1 => 'OPT_ALL',
    2 => 'OPT_READ',
    3 => 'OPT_WRITE',
    4 => 'OPT_W_ADD',
    5 => 'OPT_W_REMOVE',
    6 => 'OPT_READ_W_ADD',
    7 => 'OPT_READ_W_REMOVE',
  );
}

class wtcommon_TInvalidOperation extends TException {
  static $_TSPEC;

  public $error = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TInvalidOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TInvalidOperation');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_TInvalidArgument extends TException {
  static $_TSPEC;

  public $error = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TInvalidArgument';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TInvalidArgument');
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 1);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_TVersion {
  static $_TSPEC;

  public $verMajor = null;
  public $verMinor = null;
  public $verBuild = null;
  public $verRevision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'verMajor',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'verMinor',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'verBuild',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'verRevision',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['verMajor'])) {
        $this->verMajor = $vals['verMajor'];
      }
      if (isset($vals['verMinor'])) {
        $this->verMinor = $vals['verMinor'];
      }
      if (isset($vals['verBuild'])) {
        $this->verBuild = $vals['verBuild'];
      }
      if (isset($vals['verRevision'])) {
        $this->verRevision = $vals['verRevision'];
      }
    }
  }

  public function getName() {
    return 'TVersion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verMajor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verMinor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verBuild);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TVersion');
    if ($this->verMajor !== null) {
      $xfer += $output->writeFieldBegin('verMajor', TType::BYTE, 1);
      $xfer += $output->writeByte($this->verMajor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verMinor !== null) {
      $xfer += $output->writeFieldBegin('verMinor', TType::BYTE, 2);
      $xfer += $output->writeByte($this->verMinor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verBuild !== null) {
      $xfer += $output->writeFieldBegin('verBuild', TType::BYTE, 3);
      $xfer += $output->writeByte($this->verBuild);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verRevision !== null) {
      $xfer += $output->writeFieldBegin('verRevision', TType::BYTE, 4);
      $xfer += $output->writeByte($this->verRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_TBDBRecovStatus {
  static $_TSPEC;

  public $current = "";
  public $doneCount = 0;
  public $failCount = 0;
  public $totalCount = 0;
  public $progress = 0;
  public $timeElapsed = 0;
  public $error = 0;
  public $message = "";
  public $running = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'current',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'doneCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'failCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'totalCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'progress',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'timeElapsed',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'running',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['current'])) {
        $this->current = $vals['current'];
      }
      if (isset($vals['doneCount'])) {
        $this->doneCount = $vals['doneCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
      if (isset($vals['progress'])) {
        $this->progress = $vals['progress'];
      }
      if (isset($vals['timeElapsed'])) {
        $this->timeElapsed = $vals['timeElapsed'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['running'])) {
        $this->running = $vals['running'];
      }
    }
  }

  public function getName() {
    return 'TBDBRecovStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->current);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->doneCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->progress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeElapsed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->running);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TBDBRecovStatus');
    if ($this->current !== null) {
      $xfer += $output->writeFieldBegin('current', TType::STRING, 1);
      $xfer += $output->writeString($this->current);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doneCount !== null) {
      $xfer += $output->writeFieldBegin('doneCount', TType::I32, 2);
      $xfer += $output->writeI32($this->doneCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I32, 3);
      $xfer += $output->writeI32($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 4);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->progress !== null) {
      $xfer += $output->writeFieldBegin('progress', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->progress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeElapsed !== null) {
      $xfer += $output->writeFieldBegin('timeElapsed', TType::I64, 6);
      $xfer += $output->writeI64($this->timeElapsed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 7);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 8);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->running !== null) {
      $xfer += $output->writeFieldBegin('running', TType::BOOL, 9);
      $xfer += $output->writeBool($this->running);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_TCMLRecovStatus {
  static $_TSPEC;

  public $curPath = "";
  public $doneCount = 0;
  public $failCount = 0;
  public $readSize = 0;
  public $totalSize = 0;
  public $progress = 0;
  public $timeElapsed = 0;
  public $error = 0;
  public $message = "";
  public $running = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'curPath',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'doneCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'failCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'readSize',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totalSize',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'progress',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'timeElapsed',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'running',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['curPath'])) {
        $this->curPath = $vals['curPath'];
      }
      if (isset($vals['doneCount'])) {
        $this->doneCount = $vals['doneCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['readSize'])) {
        $this->readSize = $vals['readSize'];
      }
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['progress'])) {
        $this->progress = $vals['progress'];
      }
      if (isset($vals['timeElapsed'])) {
        $this->timeElapsed = $vals['timeElapsed'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['running'])) {
        $this->running = $vals['running'];
      }
    }
  }

  public function getName() {
    return 'TCMLRecovStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->curPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->doneCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->readSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->progress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeElapsed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->running);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCMLRecovStatus');
    if ($this->curPath !== null) {
      $xfer += $output->writeFieldBegin('curPath', TType::STRING, 1);
      $xfer += $output->writeString($this->curPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doneCount !== null) {
      $xfer += $output->writeFieldBegin('doneCount', TType::I32, 2);
      $xfer += $output->writeI32($this->doneCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I32, 3);
      $xfer += $output->writeI32($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readSize !== null) {
      $xfer += $output->writeFieldBegin('readSize', TType::I64, 4);
      $xfer += $output->writeI64($this->readSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I64, 5);
      $xfer += $output->writeI64($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->progress !== null) {
      $xfer += $output->writeFieldBegin('progress', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->progress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeElapsed !== null) {
      $xfer += $output->writeFieldBegin('timeElapsed', TType::I64, 7);
      $xfer += $output->writeI64($this->timeElapsed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 8);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 9);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->running !== null) {
      $xfer += $output->writeFieldBegin('running', TType::BOOL, 10);
      $xfer += $output->writeBool($this->running);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_THandlerOptInfo {
  static $_TSPEC;

  public $enable = null;
  public $thrOpt = null;
  public $failOperationsCount = null;
  public $ignoredOperationsCount = null;
  public $operationsCount = null;
  public $operationsTime = null;
  public $lastOperationTime = null;
  public $operatingRate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'enable',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'thrOpt',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'failOperationsCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ignoredOperationsCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'operationsCount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'operationsTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'lastOperationTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'operatingRate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['enable'])) {
        $this->enable = $vals['enable'];
      }
      if (isset($vals['thrOpt'])) {
        $this->thrOpt = $vals['thrOpt'];
      }
      if (isset($vals['failOperationsCount'])) {
        $this->failOperationsCount = $vals['failOperationsCount'];
      }
      if (isset($vals['ignoredOperationsCount'])) {
        $this->ignoredOperationsCount = $vals['ignoredOperationsCount'];
      }
      if (isset($vals['operationsCount'])) {
        $this->operationsCount = $vals['operationsCount'];
      }
      if (isset($vals['operationsTime'])) {
        $this->operationsTime = $vals['operationsTime'];
      }
      if (isset($vals['lastOperationTime'])) {
        $this->lastOperationTime = $vals['lastOperationTime'];
      }
      if (isset($vals['operatingRate'])) {
        $this->operatingRate = $vals['operatingRate'];
      }
    }
  }

  public function getName() {
    return 'THandlerOptInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->thrOpt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->failOperationsCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ignoredOperationsCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operationsCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->operationsTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastOperationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->operatingRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('THandlerOptInfo');
    if ($this->enable !== null) {
      $xfer += $output->writeFieldBegin('enable', TType::BOOL, 1);
      $xfer += $output->writeBool($this->enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thrOpt !== null) {
      $xfer += $output->writeFieldBegin('thrOpt', TType::I32, 2);
      $xfer += $output->writeI32($this->thrOpt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failOperationsCount !== null) {
      $xfer += $output->writeFieldBegin('failOperationsCount', TType::I32, 3);
      $xfer += $output->writeI32($this->failOperationsCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoredOperationsCount !== null) {
      $xfer += $output->writeFieldBegin('ignoredOperationsCount', TType::I32, 4);
      $xfer += $output->writeI32($this->ignoredOperationsCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationsCount !== null) {
      $xfer += $output->writeFieldBegin('operationsCount', TType::I32, 5);
      $xfer += $output->writeI32($this->operationsCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationsTime !== null) {
      $xfer += $output->writeFieldBegin('operationsTime', TType::I64, 6);
      $xfer += $output->writeI64($this->operationsTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastOperationTime !== null) {
      $xfer += $output->writeFieldBegin('lastOperationTime', TType::I64, 7);
      $xfer += $output->writeI64($this->lastOperationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operatingRate !== null) {
      $xfer += $output->writeFieldBegin('operatingRate', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->operatingRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_THandlerInfo {
  static $_TSPEC;

  public $name = null;
  public $hndType = null;
  public $readInfo = null;
  public $writeInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'hndType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'readInfo',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_THandlerOptInfo',
          ),
        4 => array(
          'var' => 'writeInfo',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_THandlerOptInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['hndType'])) {
        $this->hndType = $vals['hndType'];
      }
      if (isset($vals['readInfo'])) {
        $this->readInfo = $vals['readInfo'];
      }
      if (isset($vals['writeInfo'])) {
        $this->writeInfo = $vals['writeInfo'];
      }
    }
  }

  public function getName() {
    return 'THandlerInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hndType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->readInfo = new wtcommon_THandlerOptInfo();
            $xfer += $this->readInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->writeInfo = new wtcommon_THandlerOptInfo();
            $xfer += $this->writeInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('THandlerInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hndType !== null) {
      $xfer += $output->writeFieldBegin('hndType', TType::I32, 2);
      $xfer += $output->writeI32($this->hndType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readInfo !== null) {
      if (!is_object($this->readInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('readInfo', TType::STRUCT, 3);
      $xfer += $this->readInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->writeInfo !== null) {
      if (!is_object($this->writeInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('writeInfo', TType::STRUCT, 4);
      $xfer += $this->writeInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_THandlerWorkerInfo {
  static $_TSPEC;

  public $name = null;
  public $listHandlers_r = null;
  public $listHandlers_w = null;
  public $queuingSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'listHandlers_r',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'listHandlers_w',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'queuingSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['listHandlers_r'])) {
        $this->listHandlers_r = $vals['listHandlers_r'];
      }
      if (isset($vals['listHandlers_w'])) {
        $this->listHandlers_w = $vals['listHandlers_w'];
      }
      if (isset($vals['queuingSize'])) {
        $this->queuingSize = $vals['queuingSize'];
      }
    }
  }

  public function getName() {
    return 'THandlerWorkerInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->listHandlers_r = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->listHandlers_r []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->listHandlers_w = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->listHandlers_w []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queuingSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('THandlerWorkerInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listHandlers_r !== null) {
      if (!is_array($this->listHandlers_r)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listHandlers_r', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->listHandlers_r));
        {
          foreach ($this->listHandlers_r as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listHandlers_w !== null) {
      if (!is_array($this->listHandlers_w)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listHandlers_w', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->listHandlers_w));
        {
          foreach ($this->listHandlers_w as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queuingSize !== null) {
      $xfer += $output->writeFieldBegin('queuingSize', TType::I32, 4);
      $xfer += $output->writeI32($this->queuingSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class wtcommon_TServicesStat {
  static $_TSPEC;

  public $version = null;
  public $timeOfBuild = null;
  public $operationsSet = null;
  public $listHandlers = null;
  public $listHandlers_r = null;
  public $listHandlers_w = null;
  public $listWorkers = null;
  public $maxSizeLRU = null;
  public $icacheSize = null;
  public $mcacheSize = null;
  public $bdbSize = null;
  public $bdbRecovStatus = null;
  public $cmlRecovStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TVersion',
          ),
        2 => array(
          'var' => 'timeOfBuild',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operationsSet',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'listHandlers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'wtcommon_THandlerInfo',
            ),
          ),
        5 => array(
          'var' => 'listHandlers_r',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'listHandlers_w',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'listWorkers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'wtcommon_THandlerWorkerInfo',
            ),
          ),
        8 => array(
          'var' => 'maxSizeLRU',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'icacheSize',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'mcacheSize',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'bdbSize',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'bdbRecovStatus',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TBDBRecovStatus',
          ),
        13 => array(
          'var' => 'cmlRecovStatus',
          'type' => TType::STRUCT,
          'class' => 'wtcommon_TCMLRecovStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['timeOfBuild'])) {
        $this->timeOfBuild = $vals['timeOfBuild'];
      }
      if (isset($vals['operationsSet'])) {
        $this->operationsSet = $vals['operationsSet'];
      }
      if (isset($vals['listHandlers'])) {
        $this->listHandlers = $vals['listHandlers'];
      }
      if (isset($vals['listHandlers_r'])) {
        $this->listHandlers_r = $vals['listHandlers_r'];
      }
      if (isset($vals['listHandlers_w'])) {
        $this->listHandlers_w = $vals['listHandlers_w'];
      }
      if (isset($vals['listWorkers'])) {
        $this->listWorkers = $vals['listWorkers'];
      }
      if (isset($vals['maxSizeLRU'])) {
        $this->maxSizeLRU = $vals['maxSizeLRU'];
      }
      if (isset($vals['icacheSize'])) {
        $this->icacheSize = $vals['icacheSize'];
      }
      if (isset($vals['mcacheSize'])) {
        $this->mcacheSize = $vals['mcacheSize'];
      }
      if (isset($vals['bdbSize'])) {
        $this->bdbSize = $vals['bdbSize'];
      }
      if (isset($vals['bdbRecovStatus'])) {
        $this->bdbRecovStatus = $vals['bdbRecovStatus'];
      }
      if (isset($vals['cmlRecovStatus'])) {
        $this->cmlRecovStatus = $vals['cmlRecovStatus'];
      }
    }
  }

  public function getName() {
    return 'TServicesStat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->version = new wtcommon_TVersion();
            $xfer += $this->version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeOfBuild);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operationsSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->listHandlers = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new wtcommon_THandlerInfo();
              $xfer += $elem19->read($input);
              $this->listHandlers []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->listHandlers_r = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $xfer += $input->readString($elem25);
              $this->listHandlers_r []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->listHandlers_w = array();
            $_size26 = 0;
            $_etype29 = 0;
            $xfer += $input->readListBegin($_etype29, $_size26);
            for ($_i30 = 0; $_i30 < $_size26; ++$_i30)
            {
              $elem31 = null;
              $xfer += $input->readString($elem31);
              $this->listHandlers_w []= $elem31;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->listWorkers = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $elem37 = new wtcommon_THandlerWorkerInfo();
              $xfer += $elem37->read($input);
              $this->listWorkers []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxSizeLRU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->icacheSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mcacheSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bdbSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->bdbRecovStatus = new wtcommon_TBDBRecovStatus();
            $xfer += $this->bdbRecovStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->cmlRecovStatus = new wtcommon_TCMLRecovStatus();
            $xfer += $this->cmlRecovStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TServicesStat');
    if ($this->version !== null) {
      if (!is_object($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::STRUCT, 1);
      $xfer += $this->version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfBuild !== null) {
      $xfer += $output->writeFieldBegin('timeOfBuild', TType::STRING, 2);
      $xfer += $output->writeString($this->timeOfBuild);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationsSet !== null) {
      $xfer += $output->writeFieldBegin('operationsSet', TType::I32, 3);
      $xfer += $output->writeI32($this->operationsSet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listHandlers !== null) {
      if (!is_array($this->listHandlers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listHandlers', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->listHandlers));
        {
          foreach ($this->listHandlers as $iter38)
          {
            $xfer += $iter38->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listHandlers_r !== null) {
      if (!is_array($this->listHandlers_r)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listHandlers_r', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->listHandlers_r));
        {
          foreach ($this->listHandlers_r as $iter39)
          {
            $xfer += $output->writeString($iter39);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listHandlers_w !== null) {
      if (!is_array($this->listHandlers_w)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listHandlers_w', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->listHandlers_w));
        {
          foreach ($this->listHandlers_w as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->listWorkers !== null) {
      if (!is_array($this->listWorkers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listWorkers', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->listWorkers));
        {
          foreach ($this->listWorkers as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxSizeLRU !== null) {
      $xfer += $output->writeFieldBegin('maxSizeLRU', TType::I32, 8);
      $xfer += $output->writeI32($this->maxSizeLRU);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icacheSize !== null) {
      $xfer += $output->writeFieldBegin('icacheSize', TType::I32, 9);
      $xfer += $output->writeI32($this->icacheSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mcacheSize !== null) {
      $xfer += $output->writeFieldBegin('mcacheSize', TType::I32, 10);
      $xfer += $output->writeI32($this->mcacheSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bdbSize !== null) {
      $xfer += $output->writeFieldBegin('bdbSize', TType::I32, 11);
      $xfer += $output->writeI32($this->bdbSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bdbRecovStatus !== null) {
      if (!is_object($this->bdbRecovStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bdbRecovStatus', TType::STRUCT, 12);
      $xfer += $this->bdbRecovStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmlRecovStatus !== null) {
      if (!is_object($this->cmlRecovStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cmlRecovStatus', TType::STRUCT, 13);
      $xfer += $this->cmlRecovStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
